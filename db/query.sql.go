// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const addPrompt = `-- name: AddPrompt :one
INSERT INTO prompts (session_id, agent, state, history_len, system, request, created_at, mach_time_sum, mach_time)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id
`

type AddPromptParams struct {
	SessionID   string    `json:"session_id"`
	Agent       string    `json:"agent"`
	State       string    `json:"state"`
	HistoryLen  int64     `json:"history_len"`
	System      string    `json:"system"`
	Request     string    `json:"request"`
	CreatedAt   time.Time `json:"created_at"`
	MachTimeSum int64     `json:"mach_time_sum"`
	MachTime    string    `json:"mach_time"`
}

func (q *Queries) AddPrompt(ctx context.Context, arg AddPromptParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addPrompt,
		arg.SessionID,
		arg.Agent,
		arg.State,
		arg.HistoryLen,
		arg.System,
		arg.Request,
		arg.CreatedAt,
		arg.MachTimeSum,
		arg.MachTime,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const addPromptResponse = `-- name: AddPromptResponse :exec
UPDATE prompts
SET response=?
WHERE id = ?
RETURNING id
`

type AddPromptResponseParams struct {
	Response sql.NullString `json:"response"`
	ID       int64          `json:"id"`
}

func (q *Queries) AddPromptResponse(ctx context.Context, arg AddPromptResponseParams) error {
	_, err := q.db.ExecContext(ctx, addPromptResponse, arg.Response, arg.ID)
	return err
}

const dropPrompts = `-- name: DropPrompts :exec
DROP TABLE prompts
`

func (q *Queries) DropPrompts(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, dropPrompts)
	return err
}

const listPromptsBySessID = `-- name: ListPromptsBySessID :one
SELECT id, session_id, agent, state, system, history_len, request, response, created_at, mach_time_sum, mach_time
FROM prompts
WHERE session_id = ?
LIMIT 1
`

func (q *Queries) ListPromptsBySessID(ctx context.Context, sessionID string) (Prompt, error) {
	row := q.db.QueryRowContext(ctx, listPromptsBySessID, sessionID)
	var i Prompt
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Agent,
		&i.State,
		&i.System,
		&i.HistoryLen,
		&i.Request,
		&i.Response,
		&i.CreatedAt,
		&i.MachTimeSum,
		&i.MachTime,
	)
	return i, err
}
